#pragma once

#include "internals/btypes.h"
#include "internals/iterator.h"
#include <type_traits>

_FCL_NAMESPACE_BEGIN

template<class _Ty>
constexpr const _Ty& min(const _Ty& a, const _Ty& b)
{
    return (a < b) ? a : b;
}

template<class _Ty>
constexpr const _Ty& max(const _Ty&a, const _Ty& b)
{
    return (a > b) ? a : b;
}

template<class _Itery, class _Ty>
constexpr _Itery find(_Itery first, _Itery last, const _Ty& value)
{
    for (_Itery i = first; i != last; ++i)
    {
        if (*i == value)
        {
            return i;
        }
    }

    return last;
}

template<class _Itery, class _Predy>
constexpr _Itery find_if(_Itery first, _Itery last, _Predy predicate)
{
    for (_Itery i = first; i != last; ++i)
    {
        if (predicate(*i))
        {
            return i;
        }
    }

    return last;
}

template<class _Inpy, class _Outery>
constexpr _Outery copy(_Inpy begin, _Inpy end, _Outery result)
{
    size_t __distance = end - begin;
    for (size_t x = 0; x < __distance; x++)
    {
        result[x] = begin[x];
    }

    return result + __distance;
}

/* SHOULD BE IN iterator HEADER */
template<class _Inpy> 
constexpr typename iterator_traits<_Inpy>::difference_type
distance(_Inpy begin, _Inpy end)
{
    using _Try = iterator_traits<_Inpy>;
    if constexpr (std::is_same<typename _Try::iterator_category, 
                                random_access_iterator_tag>())
    {
        return (end - begin);
    }

    typename _Try::difference_type __di;
    while (begin != end)
    {
        ++__di; ++begin;
    }

    return __di;
}

_FCL_NAMESPACE_END