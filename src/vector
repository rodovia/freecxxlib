#pragma once

#include "internals/ctordtor.h"
#include "memory"
#include "stdint.h"
#include "utility"
// #include <initializer_list>

#include "internals/btypes.h"
#include "internals/iterator.h"
#include "internals/memcpy.h"
#include "algorithm"
#include "type_traits"

_FCL_NAMESPACE_BEGIN

template <class _Ty, class _Aly = allocator<_Ty>> class vector
{
public:
    using value_type = _Ty;
    using reference = _Ty&;
    using const_reference = const _Ty&;
    using iterator = __fcl::fwd_iterator<_Ty>;
    using const_iterator = const __fcl::fwd_iterator_const<_Ty>;
    using difference_type =
        typename __fcl::iterator_traits<iterator>::difference_type;
    using size_type =
        typename __fcl::iterator_traits<iterator>::difference_type;

    /* Some constructors were omitted. */

    constexpr vector()
        : vector(_Aly())
    {
    }
/*
    constexpr vector(initializer_list<_Ty> il, const _Aly& al = _Aly())
        : _m_Buffer(il.begin()),
          _m_Allocator(al),
          _m_Length(il.size()),
          _m_Capacity(il.size())
    {
    }
*/
    constexpr explicit vector(const _Aly& a)
        : _m_Allocator(a),
          _m_Length(0),
          _m_Capacity(0),
          _m_Buffer(nullptr)
    {}

    constexpr explicit vector(size_type n, const _Aly& a = _Aly())
        : _m_Allocator(a),
          _m_Length(0),
          _m_Capacity(n),
          _m_Buffer(nullptr)
    {
        _m_Buffer = this->allocate(n);
    }

    constexpr vector(size_type size, const _Ty& value,
                     const _Aly& al = _Aly())
        : _m_Allocator(al),
          _m_Length(size),
          _m_Capacity(size),
          _m_Buffer(nullptr)
    {
        _m_Buffer = this->allocate(_m_Capacity);
        __fcl::generic_memset(_m_Buffer, value, _m_Capacity);
    }

    constexpr vector(const vector& vec)
        : _m_Allocator(vec._m_Allocator),
          _m_Length(vec._m_Length),
          _m_Capacity(vec._m_Capacity)
    {
        _m_Buffer = this->allocate(_m_Capacity);
        __fcl::generic_memcpy(_m_Buffer, vec._m_Buffer, _m_Length);
    }

    constexpr vector(vector&& vec) noexcept
    {
        _FCL::swap(_m_Buffer, vec._m_Buffer);
        _FCL::swap(_m_Allocator, vec._m_Allocator);
        _FCL::swap(_m_Capacity, vec._m_Capacity);
        _FCL::swap(_m_Length, vec._m_Length);
    }


    constexpr vector& operator=(const vector& rhs) noexcept
    {
        _m_Allocator = rhs._m_Allocator;
        _m_Capacity = rhs._m_Capacity;
        _m_Length = rhs._m_Length;
        _m_Buffer = this->allocate(_m_Capacity);
        __fcl::generic_memcpy(_m_Buffer, rhs._m_Buffer, _m_Length);
        return *this;
    }

    constexpr _Aly get_allocator()
    {
        return _m_Allocator;
    }

    ~vector()
    {
        _m_Allocator.deallocate(_m_Buffer, _m_Capacity + 1);
    }

    constexpr iterator begin() noexcept
    {
        return iterator(_m_Buffer);
    }

    constexpr iterator end() noexcept
    {
        return iterator(_m_Buffer + _m_Length);
    }

    constexpr const_iterator cbegin() const noexcept
    {
        return const_iterator(_m_Buffer);
    }

    constexpr const_iterator cend() const noexcept
    {
        return const_iterator(_m_Buffer + _m_Length);
    }

    [[nodiscard]] constexpr bool empty() const noexcept
    {
        return _m_Length == 0;
    }

    constexpr size_type size() const noexcept
    {
        return _m_Length;
    }

    constexpr size_type capacity() const noexcept
    {
        return _m_Capacity;
    }

    constexpr void swap(vector& other)
    {
        _FCL::swap(_m_Allocator, other._m_Allocator);
        _FCL::swap(_m_Length, other._m_Length);
        _FCL::swap(_m_Capacity, other._m_Capacity);
        _FCL::swap(_m_Buffer, other._m_Buffer);
    }

    constexpr void reserve(size_type size)
    {
        if (size > _m_Capacity)
        {
            this->resize_buffers(size);
        }
    }

    constexpr void shrink_to_fit()
    {
        if (_m_Capacity > _m_Length)
        {
            this->resize_buffers(_m_Length);
        }
    }

    constexpr _Ty* data() noexcept
    {
        return _m_Buffer;
    }

    constexpr const _Ty* data() const noexcept
    {
        return _m_Buffer;
    }

    void push_back(const _Ty& d)
    {
        if (_m_Length >= _m_Capacity)
        {
            this->resize_buffers(_m_Capacity + 4);
        }

        _m_Buffer[_m_Length] = d;
        _m_Length++;
    }

    void push_back(_Ty&& d)
    {
        if (_m_Length >= _m_Capacity)
        {
            this->resize_buffers(_m_Capacity + 4);
        }

        _m_Buffer[_m_Length] = move(d);
        _m_Length++;
    }

    constexpr reference operator[](size_type index)
    {
        return _m_Buffer[index];
    }

    constexpr const_reference operator[](size_type index) const
    {
        return _m_Buffer[index];
    }

    constexpr reference at(size_type index)
    {
        return operator[](index);
    }

    constexpr const_reference at(size_type index) const
    {
        return operator[](index);
    }

    constexpr reference front()
    {
        return *_m_Buffer;
    }

    constexpr reference back()
    {
        return _m_Buffer[_m_Length];
    }

    constexpr const_reference front() const
    {
        return *_m_Buffer;
    }

    constexpr const_reference back() const
    {
        return _m_Buffer[_m_Length];
    }

    constexpr void pop_back()
    {
        if constexpr (_FCL::is_object_v<_Ty>)
        {
            __fcl::destroy_one(__fcl::addressof(_m_Buffer[_m_Length]));
        }

        _m_Length--;
    }

    constexpr void erase(iterator first, iterator last)
    {
        __fcl::destroy_many(first, last);
    }

    constexpr void erase(iterator item)
    {
        _FCL::remove<iterator, _Ty>(item, end(), *item);
        __fcl::destroy_one(_FCL::addressof(item));
        _m_Length--;
    }

    constexpr void erase(const_iterator item)
    {
        _FCL::remove<const_iterator, _Ty>(item, item + 1, *item);
        __fcl::destroy_one(_FCL::addressof(item));
        _m_Length--;
    }

    constexpr void __decr_length_by(size_t _size)
    {
        _m_Length -= _size;
    }

private:
    constexpr void resize_buffers(size_type nsize)
    {
        auto oldcap = _m_Capacity;
        _m_Capacity = nsize;
        _Ty* buffer = this->allocate(nsize);
        _FCL::swap(buffer, _m_Buffer);

        if (buffer != nullptr)
        {
            __fcl::generic_memcpy(_m_Buffer, buffer, oldcap);
            _m_Allocator.deallocate(buffer, _m_Capacity);
        }
    }

    constexpr _Ty* allocate(size_type size)
    {
        return _m_Allocator.allocate(size);
    }

    _Aly _m_Allocator;
    size_type _m_Length;
    size_type _m_Capacity;
    _Ty* _m_Buffer;
};

template <class _Ty>
constexpr void swap(vector<_Ty>& lhs, vector<_Ty&> rhs) noexcept
{
    lhs.swap(rhs);
}

template <class _Ty, class _Aly>
constexpr typename vector<_Ty, _Aly>::difference_type
erase(vector<_Ty, _Aly>& _erased, const _Ty& _value)
{
    auto __iter = remove(_erased.begin(), _erased.end(), _value);
    auto __distance = distance(__iter, _erased.end());
    _erased.__decr_length_by(__distance);
    _erased.erase(__iter, _erased.end());
    return __distance;
}

template <class _Ty, class _Aly, class _Predy>
constexpr typename vector<_Ty, _Aly>::difference_type
erase_if(vector<_Ty, _Aly>& _erased, _Predy _predicate)
{
    auto __iter = remove_if(_erased.begin(), _erased.end(), _predicate);
    auto __distance = distance(__iter, _erased.end());
    _erased.erase(__iter, _erased.end());
    return __distance;
}

_FCL_NAMESPACE_END
