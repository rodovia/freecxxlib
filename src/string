#pragma once

#include "internals/btypes.h"
#include "internals/basic_string_view.h"
#include "internals/memcpy.h"
#include <initializer_list>
#include "internals/iterator.h"
#include "memory"
#include "utility"
#include "algorithm"
#include "type_traits"

_FCL_NAMESPACE_BEGIN

template<class _Cy, class _Try = char_traits<_Cy>, class _Aly = allocator<_Cy>>
class basic_string
{
public:
    using traits_type = _Try;
    using value_type = _Cy;
    using allocator_type = _Aly;
    using size_type = typename _Aly::size_type; /* NONCOMPLIANT */
    using reference = _Cy&;
    using const_reference = const _Cy&;
    using iterator = __fcl::fwd_iterator<_Cy>;
    using const_iterator = __fcl::fwd_iterator_const<_Cy>;

    static constexpr size_type npos = size_type(-1);

    /* Some constructors were omitted. */

    constexpr basic_string() noexcept(noexcept(_Aly())) 
        : basic_string(_Aly())
    {
    }

    constexpr basic_string(const basic_string& str, size_type pos,
                            _Aly& a = _Aly())
        : _m_Length(str.size() - pos),
          _m_Capacity(_m_Length),
          _m_Allocator(a)
    {
        _Cy* buffer = _m_Allocator.allocate(_m_Capacity);
        _Try::move(buffer, str._m_Buffer + pos, _m_Length);
        std::swap(_m_Buffer, buffer);
    }

    constexpr basic_string(basic_string&& str, size_type pos,
                            _Aly& a = _Aly())
    {
        this->swap(str);
        _m_Allocator = a;
        if (_m_Capacity == _m_Length)
        {
            _m_Capacity -= pos;
        }

        _m_Buffer += pos;
        _m_Length -= pos;
    }

    constexpr basic_string(basic_string&& str, size_type pos,
                            size_type n, const _Aly& a = _Aly())
    {
        size_type __rlen = min(n, str._m_Length - pos);
        this->swap(str);
        if (_m_Capacity == _m_Length)
        {
            _m_Capacity -= __rlen;
        }

        _m_Allocator = a;
        _m_Buffer += __rlen;
        _m_Length -= __rlen;
    }

    constexpr explicit basic_string(const _Aly& a) noexcept
        : _m_Length(0),
          _m_Capacity(0),
          _m_Buffer(nullptr),
          _m_Allocator(a)
    {
    }

    constexpr basic_string(const basic_string& str)
        : _m_Length(str._m_Length),
          _m_Capacity(str._m_Capacity),
          _m_Allocator(str._m_Allocator)
    {
        _Cy* buffer = _m_Allocator.allocate(_m_Capacity);
        _Try::move(buffer, str._m_Buffer, _m_Length);
        std::swap(_m_Buffer, buffer);
    }

    constexpr basic_string(basic_string&& str) noexcept
    {
        std::swap(_m_Length, str._m_Length);
        std::swap(_m_Capacity, str._m_Capacity);
        std::swap(_m_Buffer, str._m_Buffer);
        std::swap(_m_Allocator, str._m_Allocator);
    }

    constexpr basic_string(const _Cy* str, size_type n, const _Aly& a = _Aly())
        : _m_Length(n),
          _m_Capacity(_m_Length),
          _m_Allocator(a)
    {
        _Cy* buffer = _m_Allocator.allocate(_m_Capacity);
        _Try::move(buffer, str, _m_Capacity);
        _m_Buffer = buffer;
    }

    constexpr basic_string(const _Cy* str, const _Aly& a = _Aly())
        : _m_Length(_Try::length(str)),
          _m_Capacity(_m_Length),
          _m_Allocator(a)
    {
        _Cy* buffer = _m_Allocator.allocate(_m_Capacity);
        _Try::move(buffer, str, _m_Capacity);
        _m_Buffer = buffer;
    }

    template<class _Inpy>
    constexpr basic_string(_Inpy begin, _Inpy end, const _Aly& a = _Aly())
        : _m_Allocator(a)
    {
        size_t __di = distance(begin, end);
        _m_Length = __di;
        _m_Capacity = __di;
        _m_Buffer = _m_Allocator.allocate(_m_Capacity);
        copy(begin, end, iterator(_m_Buffer));
    }

    ~basic_string()
    {
        _m_Allocator.deallocate(_m_Buffer, _m_Capacity);
    }

    constexpr basic_string& operator=(const basic_string& str) noexcept
    {
        _m_Length = str._m_Length;
        _m_Capacity = str._m_Capacity;
        _Cy* buffer = _m_Allocator.allocate(_m_Capacity);

        _Try::move(buffer, str._m_Buffer, _m_Length);
        std::swap(buffer, _m_Buffer);

        if (buffer != nullptr)
        {
            _m_Allocator.deallocate(buffer, 0);
        }
        return *this;
    }

    constexpr basic_string& operator=(basic_string&& str) noexcept
    {
        std::swap(_m_Buffer, str._m_Buffer);
        _m_Length = str._m_Length;
        _m_Capacity = str._m_Capacity;
        return *this;
    }

    constexpr size_type size() const noexcept
    {
        return _m_Length;
    }

    constexpr size_type length() const noexcept
    {
        return _m_Length;
    }

    /* max_size, resize, resize_and_overwrite were omitted. */

    constexpr size_type capacity() const noexcept
    {
        return _m_Capacity;
    }

    /* reserve was omitted. */

    constexpr void shrink_to_fit()
    {
        if (_m_Length != _m_Capacity)
        {
            _Cy* neobuffer = _m_Allocator.allocate(_m_Length);
            _Try::copy(neobuffer, _m_Buffer, _m_Length);
            _m_Allocator.deallocate(_m_Buffer, 0);
            _m_Capacity = _m_Length;
        }
    }

    /* clear was omitted. */

    [[nodiscard]] constexpr bool empty() const noexcept
    {
        return _m_Length == 0;
    }

    constexpr const_reference operator[](size_type pos) const
    {
        return _m_Buffer[pos];
    }

    constexpr reference operator[](size_type pos) noexcept
    {
        return _m_Buffer[pos];
    }

    constexpr const_reference at(size_type pos) const
    {
        return operator[](pos);
    }

    constexpr reference at(size_type pos)
    {
        return operator[](pos);
    }

    constexpr const_reference front() const
    {
        return operator[](0);
    }

    constexpr reference front()
    {
        return operator[](0);
    }

    constexpr const _Cy& back() const
    {
        return operator[](_m_Length - 1);
    }

    constexpr _Cy& back()
    {
        return operator[](_m_Length - 1);
    }

    constexpr basic_string& append(const _Cy* buffer, size_type size)
    {
        if (_m_Length + size >= _m_Capacity)
        {
            this->resize_buffers(_m_Length + size);
        }

        _Try::move(_m_Buffer + _m_Length, buffer, size);
        _m_Length += size;
        return *this;
    }

    constexpr basic_string& append(const _Cy* buffer)
    {
        return this->append(buffer, _Try::length(buffer));
    }

    constexpr void push_back(_Cy c)
    {
        this->append(1, c);
    }

    constexpr basic_string& assign(const basic_string& str)
    {
        return *this = str;
    }

    constexpr basic_string& assign(const _Cy* buffer, size_type size)
    {
        if (_m_Length < size)
        {
            this->resize_buffers(size);
        }

        _m_Length = size;
        _Try::move(_m_Buffer, buffer, size);
        return *this;
    }

    constexpr basic_string& assign(const _Cy* buffer)
    {
        return this->assign(buffer, _Try::length(buffer));
    }

    constexpr basic_string& assign(initializer_list<_Cy> il)
    {
        return this->assign(il.begin(), il.size());
    }

    constexpr basic_string& insert(size_type pos, const _Cy* buffer, size_type size)
    {
        if (pos > _m_Length)
        {
            pos = _m_Length;
        }
    
        if (size > _m_Capacity)
        {
            this->resize_buffers(_m_Capacity + size);
        }

        _Try::move(_m_Buffer + pos + size, _m_Buffer + pos, size);
        _Try::move(_m_Buffer + pos, buffer, size);
        return *this;
    }

    constexpr const _Cy* data() const noexcept
    {
        return _m_Buffer;
    }

    constexpr const _Cy* c_str() const noexcept
    {
        return _m_Buffer;
    }

    constexpr int compare(basic_string rhs) const noexcept
    {
        size_type rlen = std::min(_m_Length, rhs._m_Length);
        int res = _Try::compare(_m_Buffer, rhs._m_Buffer, rlen);

        if (res != 0)
        {
            return res;
        }

        if (_m_Length < rhs._m_Length)
        {
            return -1;
        }

        if (_m_Length > rhs._m_Length)
        {
            return 1;
        }

        return 0;
    }

    constexpr int compare(const _Cy* rhs) const
    {
        return this->compare(basic_string(rhs));
    }

    constexpr basic_string substr(size_type pos = 0, size_type n = npos) const
    {
        return basic_string(*this, pos, n);
    }

    constexpr basic_string substr(size_type pos = 0, size_type n = npos)
    {
        return basic_string(std::move(*this), pos, n);
    }

    constexpr void swap(basic_string& str)
    {
        std::swap(_m_Buffer, str._m_Buffer);
        std::swap(_m_Length, str._m_Length);
        std::swap(_m_Capacity, str._m_Capacity);
        std::swap(_m_Allocator, str._m_Allocator);
    }

private:
    constexpr void resize_buffers(size_type newsize)
    {
        size_type factual = newsize < _m_Length ? _m_Length : newsize;
        _Cy* neobuffer = _m_Allocator.allocate(newsize);
        _Try::copy(neobuffer, _m_Buffer, factual);

        std::swap(neobuffer, _m_Buffer);
        _m_Allocator.deallocate(neobuffer, 0);
        _m_Capacity = newsize;
    }

private:
    size_type _m_Length;
    size_type _m_Capacity;
    _Cy* _m_Buffer;
    _Aly _m_Allocator;
};

template<class _Cy, class _Try, class _Aly>
constexpr bool operator==(std::basic_string<_Cy, _Try, _Aly>& lhs, 
                            std::basic_string<_Cy, _Try, _Aly> rhs)
{
    return lhs.compare(rhs) == 0;
}

template<class _Cy, class _Try, class _Aly>
constexpr bool operator==(std::basic_string<_Cy, _Try, _Aly> lhs, 
                            const _Cy* rhs)
{
    return lhs.compare(rhs) == 0;
}

template<class _Cy, class _Try, class _Aly>
constexpr void swap(std::basic_string<_Cy, _Try, _Aly>& lhs,
                    std::basic_string<_Cy, _Try, _Aly>& rhs) noexcept
{
    lhs.swap(rhs);
}

using string = basic_string<char>;

_FCL_NAMESPACE_END
