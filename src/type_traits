#pragma once

#include "internals/btypes.h"
#include "internals/declval.h"

#define __integral_const(T)                                 \
    template<> struct is_integral<signed T> : true_type {};  \
    template<> struct is_integral<const T> : true_type {};    \
    template<> struct is_integral<unsigned T> : true_type {};  \
    template<> struct is_integral<const unsigned T> : true_type {};

#define __fp_const(T) \
    template<> struct is_floating_point<T> : true_type {};  \
    template<> struct is_floating_point<const T> : true_type {};

namespace __fcl
{

template<class _Ty>
struct remove_const
{
    using type = _Ty;
};

template<class _Ty>
struct remove_const<const _Ty>
{
    using type = _Ty;
};

template<class _Ty>
using remove_const_t = typename remove_const<_Ty>::type;

}

_FCL_NAMESPACE_BEGIN

template<class _Fromy, class _Toy>
struct __convert_t
{
    using converted = decltype(static_cast<_Toy>(declval<_Fromy>()));
};

template<class _Ty, _Ty _Valuey> struct integral_constant
{
    static constexpr _Ty value = _Valuey;

    using value_type = _Ty;
    using type = integral_constant<_Ty, _Valuey>;

    constexpr operator value_type() const noexcept
    {
        return value;
    }

    constexpr value_type operator()() const noexcept
    {
        return value;
    }
};

template<bool _By> 
using bool_constant = integral_constant<bool, _By>;
using true_type = bool_constant<true>;
using false_type = bool_constant<false>;

template<bool _Conditiony, class _Theny, class _Elsey>
struct __if
{};

template<class _Theny, class _Elsey>
struct __if<true, _Theny, _Elsey>
{
    using type = _Theny; 
};

template<class _Theny, class _Elsey>    
struct __if<false, _Theny, _Elsey>
{
    using type = _Elsey;
};

template<bool _Vy, class _Theny, class _Elsy>
using conditional = __if<_Vy, _Theny, _Elsy>;

/* Primary category types */

template<class _Ty> 
struct is_void : false_type
{};

template<>
struct is_void<void> : true_type
{};

template<class _Ty> 
struct is_nullptr_t : false_type
{};

template<>
struct is_nullptr_t<nullptr_t> : true_type
{};

template<class _Ty>
struct is_integral : false_type
{};

__integral_const(char);
__integral_const(short int);
__integral_const(int);
__integral_const(long int);
__integral_const(long long int);

template<>
struct is_integral<bool> : true_type
{};


template<>
struct is_integral<const bool> : true_type
{};

template<class _Ty>
struct is_floating_point : false_type
{};

__fp_const(float);
__fp_const(double);
__fp_const(long double);

template<class _Ty>
struct is_array : false_type
{};

template<class _Ty>
struct is_array<_Ty[]> : true_type
{};

template<class _Ty, _FCL::size_t _Sizey>
struct is_array<_Ty[_Sizey]> : true_type
{};

template<class _Ty>
struct is_function : false_type
{};

template<class _Ty>
struct is_function<_Ty()> : true_type
{};

template<class _Ty>
struct is_lvalue_reference : false_type
{};

template<class _Ty>
struct is_lvalue_reference<_Ty&> : true_type
{};

template<class _Ty>
struct is_rvalue_reference : false_type
{};

template<class _Ty>
struct is_rvalue_reference<_Ty&&> : true_type
{};

template<class _Ty>
struct is_pointer : false_type
{};

template<class _Ty>
struct is_pointer<_Ty*> : true_type
{};

template<class _Ty>
struct is_member_object_pointer : false_type
{};

template<class _Ty, class _Clzy>
struct is_member_object_pointer<_Ty _Clzy::*> : __if<!is_function<_Ty>::value, true_type, false_type>
{};

template<class _Ty>
struct is_member_function_pointer : false_type
{};

template<class _Ty, class _Clzy>
struct is_member_function_pointer<_Ty _Clzy::*> : __if<is_function<_Ty>::value, true_type, false_type>
{};

template<typename _Ty>
struct is_class : false_type
{};

template<>
struct is_class<class _Ty> : true_type 
{};

template<class _T1y, class _T2y>
struct is_same : false_type
{};

template<class _T1y>
struct is_same<_T1y, _T1y> : true_type
{};

template<class _T1y, class _T2y>
inline constexpr bool is_same_v = is_same<_T1y, _T2y>::value;

template<class _Fromy, class _Toy>
struct is_convertible : is_same<typename __convert_t<_Fromy, _Toy>::converted, _Toy>
{};

template<class _Ty>
struct remove_reference
{
    using type = _Ty;
};

template<class _Ty>
struct remove_reference<_Ty&>
{
    using type = _Ty;
};

template<class _Ty>
struct remove_reference<_Ty&&>
{
    using type = _Ty;
};

template<class _Ty>
struct type_identity
{
    using type = _Ty;
};

template<bool _By, class _Ty = void>
struct enable_if
{};

template<class _Ty>
struct enable_if<true, _Ty>
{
    using type = _Ty;
};

template<class _Ty>
struct enable_if<false, _Ty>
{};


template<bool _By, class _Ty = void>
using enable_if_t = typename enable_if<_By, _Ty>::type;

template<class _Ty>
struct is_scalar : bool_constant<std::is_nullptr_t<_Ty>::value ||
                                 std::is_integral<_Ty>::value ||
                                 std::is_floating_point<_Ty>::value ||
                                 // std::is_pointer<_Ty>::value ||
                                 std::is_member_function_pointer<_Ty>::value>
{};

template<class _Ty>
struct is_object : bool_constant<std::is_array<_Ty>::value ||
                                 std::is_class<_Ty>::value /*||
                                 std::is_scalar<_Ty>::value*/>
{};                            

template<class _Ty>
inline constexpr bool is_object_v = is_object<_Ty>();

template<class _Ty>
using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
using type_identity_t = typename type_identity<_Ty>::type;

_FCL_NAMESPACE_END

#undef __integral_const


